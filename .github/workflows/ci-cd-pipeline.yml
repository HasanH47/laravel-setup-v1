name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: composer, phpunit, node
          coverage: xdebug

      - name: Install Dependencies
        run: |
          composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader
          npm install
          npm run build

      - name: Create .env file
        run: cp .env.example .env

      - name: Set up .env file
        run: |
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_DATABASE=laravel/DB_DATABASE=laravel/' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=user/' .env
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/' .env

      - name: Run Migrations
        run: php artisan migrate --force

  code_analysis:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Run Static Code Analysis
        run: |
          vendor/bin/phpcs --standard=PSR12 app/
          vendor/bin/phpstan analyse --level=max

      - name: Run Security Check
        run: |
          composer audit
          vendor/bin/security-checker security:check

  tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  dusk_tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Run Dusk Tests
        run: php artisan dusk

  deploy:
    runs-on: ubuntu-latest
    needs: [setup, tests, dusk_tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Server
        run: |
          # Tambahkan script deployment di sini
          echo "Deploying application..."
