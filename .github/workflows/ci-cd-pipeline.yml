name: Laravel CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job untuk CI
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring, exif, pcntl, bcmath, gd, intl, pdo_mysql
          ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=2G
          coverage: none
          tools: composer, node

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: Generate application key
        run: php artisan key:generate

      - name: Cache configuration
        run: php artisan config:cache

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: laravel
          DB_USERNAME: user
          DB_PASSWORD: password
        run: php artisan test --parallel --stop-on-failure

  # Job untuk CD
  # deploy:
  #   name: Continuous Deployment
  #   runs-on: ubuntu-latest
  #   needs: ci
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Setup PHP
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: 8.1
  #         extensions: mbstring, exif, pcntl, bcmath, gd, intl, pdo_mysql
  #         ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=2G
  #         coverage: none
  #         tools: composer, node

  #     - name: Install Composer dependencies
  #       run: composer install --prefer-dist --no-progress --no-suggest --no-interaction --optimize-autoloader --no-dev

  #     - name: Sync files to server
  #       env:
  #         DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
  #         DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  #         DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
  #       run: |
  #         rsync -avz --delete --exclude='.env' --exclude='storage/' --exclude='.git/' --exclude='vendor/' ./ $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH

  #     - name: SSH into Server and Deploy
  #       env:
  #         DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
  #         DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  #         DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
  #       run: |
  #         ssh $DEPLOY_USER@$DEPLOY_SERVER << EOF
  #           cd $DEPLOY_PATH
  #           composer install --prefer-dist --no-dev --no-interaction --optimize-autoloader
  #           php artisan migrate --force
  #           php artisan config:cache
  #           php artisan route:cache
  #           php artisan view:cache
  #           php artisan storage:link
  #           sudo service php8.1-fpm reload
  #         EOF
  deploy:
  name: Mock Deployment
  runs-on: ubuntu-latest
  needs: ci
  if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.1
        extensions: mbstring, exif, pcntl, bcmath, gd, intl, pdo_mysql
        ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=2G
        coverage: none
        tools: composer, node

    - name: Mock Install Composer dependencies
      run: echo "Pretend to install Composer dependencies"

    - name: Mock Sync files to server
      run: echo "Pretend to sync files to server"

    - name: Mock SSH into Server and Deploy
      run: echo "Pretend to SSH into server and run deployment commands"
